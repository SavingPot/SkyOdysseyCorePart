using UnityEngine;
using System.Collections;
using UnityEngine.Tilemaps;
using MainGame.Managers;
using Tools = MainGame.Managers.Tools;
using System;
using Newtonsoft.Json;
using Sirenix.OdinInspector;

namespace MainGame.Tiles
{
    [Serializable, CreateAssetMenu(fileName = "TerrainTile", menuName = "Tiles/Terrain Tile")]
    public class TerrainTileADS : IdTileADS
    {
        public TransitionTileDatum[] transitionTileData;

        protected override void ReloadSprites()
        {
            base.ReloadSprites();

            for (int i = 0; i < transitionTileData.Length; i++)
            {
                transitionTileData[i].tiledSprite = ModFactory.CompareTexture(transitionTileData[i].tiledSpriteId).spriteLoaded;
                transitionTileData[i].angularSprite = ModFactory.CompareTexture(transitionTileData[i].angularSpriteId).spriteLoaded;
                transitionTileData[i].edgeSprite = ModFactory.CompareTexture(transitionTileData[i].edgeSpriteId).spriteLoaded;
                transitionTileData[i].missingOneFaceSprite = ModFactory.CompareTexture(transitionTileData[i].missingOneFaceSpriteId).spriteLoaded;
                transitionTileData[i].missingTwoFaceSprite = ModFactory.CompareTexture(transitionTileData[i].missingTwoFaceSpriteId).spriteLoaded;
            }
        }

        // 根据相邻的 Tile 确定使用哪个贴图
        public override void GetTileData(Vector3Int location, ITilemap tilemap, ref TileData tileData)
        {
            base.GetTileData(location, tilemap, ref tileData);

            var m = tileData.transform;

            for (int i = 0; i < transitionTileData.Length; i++)
            {
                if (transitionTileData[i].active)
                {
                    //以下用于简化名称
                    string id = transitionTileData[i].intersectingTileId;
                    Sprite angularSprite = transitionTileData[i].angularSprite;
                    Sprite edgeSprite = transitionTileData[i].edgeSprite;
                    Sprite tiledSprite = transitionTileData[i].tiledSprite;
                    Sprite missingOneFaceSprite = transitionTileData[i].missingOneFaceSprite;
                    Sprite missingTwoFaceSprite = transitionTileData[i].missingTwoFaceSprite;
                    bool leftTarget = HasSuchTile(location + new Vector3Int(-1, 0, 0), id, tilemap);
                    bool rightTarget = HasSuchTile(location + new Vector3Int(1, 0, 0), id, tilemap);
                    bool upTarget = HasSuchTile(location + new Vector3Int(0, 1, 0), id, tilemap);
                    bool downTarget = HasSuchTile(location + new Vector3Int(0, -1, 0), id, tilemap);
                    bool leftSelf = HasSuchTile(location + new Vector3Int(-1, 0, 0), this.id, tilemap);
                    bool rightSelf = HasSuchTile(location + new Vector3Int(1, 0, 0), this.id, tilemap);
                    bool upSelf = HasSuchTile(location + new Vector3Int(0, 1, 0), this.id, tilemap);
                    bool downSelf = HasSuchTile(location + new Vector3Int(0, -1, 0), this.id, tilemap);

                    //上 下 左 右
                    if (leftTarget && rightTarget && upTarget && downTarget)
                    {
                        tileData.sprite = tiledSprite;

                        SetMatrix4x4Rot(ref m, 0);
                        continue;
                    }
                    //仅上方
                    if (upTarget)
                    {
                        tileData.sprite = edgeSprite;

                        SetMatrix4x4Rot(ref m, 0);
                    }
                    //仅下方
                    if (downTarget)
                    {
                        tileData.sprite = edgeSprite;

                        SetMatrix4x4Rot(ref m, 180);
                    }
                    if (leftTarget && upTarget && downTarget)
                    {
                        if (!rightTarget)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 90);
                            continue;
                        }
                        if (rightSelf)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 90);
                            continue;
                        }
                    }
                    if (rightTarget && upTarget && downTarget)
                    {
                        if (!leftTarget)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 270);
                            continue;
                        }
                        if (leftSelf)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 270);
                            continue;
                        }
                    }
                    if (downTarget && leftTarget && rightTarget)
                    {
                        if (!upTarget)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 180);
                            continue;
                        }
                        if (upSelf)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 180);
                            continue;
                        }
                    }
                    if (upTarget && leftTarget && rightTarget)
                    {
                        if (!downTarget)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 0);
                            continue;
                        }
                        if (downSelf)
                        {
                            tileData.sprite = missingOneFaceSprite;

                            SetMatrix4x4Rot(ref m, 0);
                            continue;
                        }
                    }
                    if (leftTarget)
                    {
                        tileData.sprite = edgeSprite;

                        SetMatrix4x4Rot(ref m, 90);

                        if (downTarget)
                        {
                            tileData.sprite = angularSprite;

                            SetMatrix4x4Rot(ref m, 90);
                        }
                        if (upTarget)
                        {
                            tileData.sprite = angularSprite;

                            SetMatrix4x4Rot(ref m, 0);
                        }
                    }
                    if (rightTarget)
                    {
                        tileData.sprite = edgeSprite;

                        SetMatrix4x4Rot(ref m, -90);

                        if (downTarget)
                        {
                            tileData.sprite = angularSprite;

                            SetMatrix4x4Rot(ref m, -180);
                        }
                        if (upTarget)
                        {
                            tileData.sprite = angularSprite;

                            SetMatrix4x4Rot(ref m, 270);
                        }
                    }
                    //上下一定有 (目标瓦片), 可选的是 左右都有 (自己) / 左有自己右边无目标
                    if (upTarget && downTarget && !leftTarget && !rightTarget)
                    {
                        tileData.sprite = missingTwoFaceSprite;

                        SetMatrix4x4Rot(ref m, 0);
                        continue;
                    }
                    //左右一定有 (目标瓦片), 可选的是 上下都有 (自己) / 上有自己右边无目标
                    if (leftTarget && rightTarget && !upTarget && !downTarget)
                    {
                        tileData.sprite = missingTwoFaceSprite;

                        SetMatrix4x4Rot(ref m, 90);
                        continue;
                    }
                }
            }

            tileData.transform = m;
        }
    }



    [Serializable]
    public struct TransitionTileDatum
    {
        [JsonIgnore, HideInInspector] public Sprite tiledSprite;
        [JsonIgnore, HideInInspector] public Sprite angularSprite;
        [JsonIgnore, HideInInspector] public Sprite edgeSprite;
        [JsonIgnore, HideInInspector] public Sprite missingOneFaceSprite;
        [JsonIgnore, HideInInspector] public Sprite missingTwoFaceSprite;

        [JsonProperty(propertyName: "tiled_sprite_id"), LabelText("平铺贴图Id")] public string tiledSpriteId;
        [JsonProperty(propertyName: "angular_sprite_id"), LabelText("边角贴图Id")] public string angularSpriteId;
        [JsonProperty(propertyName: "edge_sprite_id"), LabelText("边缘贴图Id")] public string edgeSpriteId;
        [JsonProperty(propertyName: "missing_one_face_sprite_id"), LabelText("失去一面贴图Id")] public string missingOneFaceSpriteId;
        [JsonProperty(propertyName: "missing_two_face_sprite_id"), LabelText("失去两面贴图Id")] public string missingTwoFaceSpriteId;

        [JsonProperty(propertyName: "intersecting_tile_id"), LabelText("连接瓦片的ID")] public string intersectingTileId;
        [LabelText("主动")] public bool active;
    }
}
